<section id="mint" class="mint">
  <h2 class="section-title section-title-center"> {{ section.settings.title }}</h2>

  <div class="mint-container">
    <img class="featured-image" src="{{ section.settings.featured_image }}" />

    {% fetch condition = getClaimConditionById, chain_id: "{{ settings.primary_collection.chain.id }}", contract_address: "{{ settings.primary_collection.contract_address }}" | args: '{{ section.settings.active_condition_id }}' %}
      <div class="mint-info-container">
        <div class="top">
          <div class="mint-date text-lg font-bold">{{ section.settings.end_date }}</div>
          <div class="mint-number text-2xl font-bold" id="supply">--</div>

          <div class="bar-box" id="bar-box" style="display: none;">
            {% assign bar_width = condition.supplyClaimed | divided_by: condition.maxClaimableSupply | times: 100 %}
            {% if bar_width >= 0 and bar_width <= 1 %}
              <div class="bar" style="width: 1%;"></div>
            {% else %}
              <div class="bar" style="width: {{ bar_width }}%;"></div>
            {% endif %}
          </div>

          <div class="price-container">
            <div class="crypto-price">
              {{ condition.pricePerToken | format_to_ether }} MATIC
            </div>
          </div>

          <div class="description" id="condition-info">
          </div>
        </div>

        <div class="bottom">
          <div id="before-mint" style="display: none;">
            <h3 class="text-md font-middle">Up to the start time</h3>

            <div class="count-boxes">
              <div class="count-box" id="days-count">
                <div class="text-lg font-middle count">-</div>
                <div class="text-md">days</div>
              </div>
              <div class="count-box" id="hours-count">
                <div class="text-lg font-middle count">-</div>
                <div class="text-md">hours</div>
              </div>
              <div class="count-box" id="mins-count">
                <div class="text-lg font-middle count">-</div>
                <div class="text-md">mins</div>
              </div>
              <div class="count-box" id="secs-count">
                <div class="text-lg font-middle count">-</div>
                <div class="text-md">secs</div>
              </div>
            </div>
          </div>

          <div id="on-mint" style="display: none;">
            {% render 'connected-wallet' %}

            <div id="actions">
              <button class="gradient-button" id="connect-button">
                Connect Wallet
              </button>

              <form class="mint-form" onsubmit="mint" style="display: none;">
                <div class="number-input-box">
                  <button id="decrement-button" class="number-input-button" type="button">
                    <img class="number-input-button-icon" src="{{ 'minus.svg' | asset_url }}" />
                  </button>
                  <input id="mint-number-input" class="number-input" min="1" max="{{ condition.quantityLimitPerWallet }}" type="number" />
                  <button id="increment-button" class="number-input-button" type="button">
                    <img class="number-input-button-icon" src="{{ 'plus.svg' | asset_url }}" />
                  </button>
                </div>

                <button class="gradient-button" id="mint-button" type="submit">
                  Mint
                  <span class="loader" style="display: none;"></span>
                </button>
              </form>
            </div>
          </div>

          <div id="after-mint" style="display: none;">
            <p class="text-md font-middle">Items have been sold out!</p>
            {% if settings.opensea_link != null %}
              <a class="view-opensea-link" href="{{ settings.opensea_link }}">
                <button class="gradient-button">View on OpenSea</button>
              </a>
            {% endif %}
          </div>
        </div>
      </div>
    {% endfetch %}
  </div>
</section>

<style>
  .mint {
    padding: 32px var(--margin-main-desktop);
    height: fit-content;
  }

  .mint-container {
    display: flex;
    gap: 64px;
    justify-content: center;
  }

  .featured-image {
    width: 40%;
    object-fit: cover;
    aspect-ratio: 1 / 1;
    border-radius: var(--rounded-lg);
  }

  .mint-info-container {
    flex: 1;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
  }

  .mint-date {
    margin-bottom: 32px;
  }

  .mint-number {
    margin-bottom: 22px;
  }

  .bar-box {
    width: 80%;
    background-color: var(--gray);
    height: 14px;
    border-radius: 999px;
  }

  .bar {
    width: 40%;
    height: 14px;
    border-radius: 999px;
    background: var(--linear-gradient);
  }

  .price-container {
    display: flex;
    align-items: flex-end;
    margin-top: 42px;
    margin-bottom: 24px;
    gap: 24px;
  }

  .crypto-price {
    font-size: 28px;
    font-weight: 600;
  }

  .fiat-price {
    font-size: 20px;
    color: var(--text-description-color);
  }

  .mint-info-container .top .description {
    font-size: 20px;
    font-weight: 400;
  }

  .mint-form {
    display: flex;
    gap: 24px;
    align-items: center;
  }

  .number-input-box {
    background: var(--gray);
    padding: 16px 24px;
    border-radius: var(--rounded-lg);
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 8px;
    width: 200px;
  }

  .number-input {
    border: none;
    background: transparent;
    text-align: center;
    width: 100%;
    font-size: 20px;
    font-weight: medium;
  }

  .number-input::-webkit-inner-spin-button {
    -webkit-appearance: none;
    margin: 0;
  }

  /* Firefox */
  .number-input[type=number] {
    -moz-appearance: textfield;
  }

  .number-input:focus {
    outline: none;
  }

  .number-input-button {
    padding: 6px;
    display: flex;
    justify-content: center;
    align-items: center;
    width: 26px;
    height: 26px;
    background-color: white;
    border-radius: 999px;
    border: none;
    flex-shrink: 0;
    cursor: pointer;
  }

  .number-input-button-icon {
    height: 8px;
    width: 8px;
  }

  .count-boxes {
    display: flex;
    gap: 32px;
    margin-top: 24px;
  }

  .count-box {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 8px;
    width: 130px;
    padding: 20px 0;
    border-radius: var(--rounded-lg);
    background-color: #F0F0FF;
  }

  .view-opensea-link {
    display: inline-block;
    margin-top: 32px;
  }

  @media screen and (max-width: 768px) {
    .mint {
      padding: 32px var(--margin-main-tablet);
    }
    
    .mint-container {
      flex-direction: column;
      gap: 32px;
    }

    .bar-box {
      width: 100%;
    }

    .featured-image {
      width: 100%;
    }

    .mint-info-container .top {
      margin-bottom: 48px;
    }
  }

  @media screen and (max-width: 576px) {
    .mint {
      padding: 32px var(--margin-main-mobile);
    }

    .mint-form {
      flex-direction: column;
      gap: 16px;
    }

    .number-input-box {
      width: 100%;
    }

    .gradient-button {
      width: 100%;
    }
  }
</style>

<script type="module">
  import {
    w3mConnectors,
    EthereumClient,
    w3mProvider,
    WagmiCore,
    WagmiCoreChains,
    WagmiCoreConnectors
} from "https://unpkg.com/@web3modal/ethereum@2.6.2"
  const { 
    getWalletClient,
    getContract,
    writeContract,
    fetchBalance,
    watchAccount,
    watchPublicClient,
    getPublicClient,
    disconnect,
    getNetwork,
    switchNetwork,
    waitForTransaction
  } = WagmiCore;
  import { web3Modal } from "{{ 'index.js' | asset_url }}"
  const btn = document.getElementById('mint-button');
  const maxInt = "115792089237316195423570985008687907853269984665640564039457584007913129639935"

  const abi = {{ settings.primary_collection.abi }}
  const chainId = {{ settings.primary_collection.chain.id }}
  const publicClient = getPublicClient({
    chainId
  })
  const readContract = getContract({
    address: '{{ settings.primary_collection.contract_address }}',
    abi,
    chainId
  }, publicClient);
  let condition;

  watchAccount(async (account) => {
    condition = await getCondition()
    await initConnectedWalletElement(account)
    await setConditionInfo(account)
    await setMintStatus()
    await setSupply()
    handleActionsSection(account)
  })

  async function getCondition() {
    const condition = await readContract.read.getClaimConditionById([{{ section.settings.active_condition_id }}])
    return condition
  }

  async function setMintStatus() {
    try {
      if (condition.startTimestamp > Date.now() / 1000) {
        console.log("mint is not started")
        document.getElementById('before-mint').style.display = 'block';
        const countdownInterval = setInterval(() => countDownTo(Number(condition.startTimestamp)), 1000);
      } else if (condition.maxClaimableSupply === condition.supplyClaimed) {
        console.log("mint is ended")
        document.getElementById('after-mint').style.display = 'block';
      } else {
        console.log("mint is active")
        document.getElementById('on-mint').style.display = 'block';
      }
    } catch (e) {
      console.error(e)
    }
  }

  function countDownTo(timestamp) {
    const daysCount = document.getElementById('days-count').querySelector('.count');
    const hoursCount = document.getElementById('hours-count').querySelector('.count');
    const minsCount = document.getElementById('mins-count').querySelector('.count');
    const secsCount = document.getElementById('secs-count').querySelector('.count');

    const now = new Date().getTime();
    const distance = timestamp * 1000 - now;

    // calculate time for days, hours, minutes and seconds
    const days = Math.floor(distance / (1000 * 60 * 60 * 24));
    const hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
    const minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
    const seconds = Math.floor((distance % (1000 * 60)) / 1000);

    daysCount.textContent = days;
    hoursCount.textContent = hours;
    minsCount.textContent = minutes;
    secsCount.textContent = seconds;

    if (distance < 0) {
      clearInterval(countdownInterval);
      daysCount.textContent = 0;
      hoursCount.textContent = 0;
      minsCount.textContent = 0;
      secsCount.textContent = 0;
      document.getElementById('before-mint').style.display = 'none';
      document.getElementById('on-mint').style.display = 'block';
    }
  }

  async function initConnectedWalletElement(account) {
    try {
      const connectedWallet = document.getElementById('connected-wallet');
      if (account.address) {
        // Get balance
        const balance = document.getElementById('balance');
        const address = account.address
        const res = await fetchBalance({
          address,
          chainId
        })

        // Display wallet
        const omittedAddress = account.address.slice(0, 6) + '...' + account.address.slice(-4);
        connectedWallet.style.display = 'flex';
        connectedWallet.querySelector('.connected-wallet-address').innerText = omittedAddress;          
        balance.innerText = `${Math.ceil(Number(res.value) / 10 ** 18 * 1000) / 1000} MATIC`

        connectedWallet.addEventListener('click', async () => {
          await web3Modal.openModal()
        })
      } else {
        connectedWallet.style.display = 'none';
      }
    } catch (err) {
      console.error(err)
    }
  }

  function handleActionsSection(account) {
    try {
      const connectButton = document.getElementById('connect-button');
      if (account.address) {
        const mintForm = document.querySelector('.mint-form');
        connectButton.style.display = 'none';
        mintForm.style.display = 'flex';
      } else {
        const mintForm = document.querySelector('.mint-form');
        connectButton.style.display = 'flex';
        mintForm.style.display = 'none';
      }
    } catch (err) {
      console.error(err)
    }
  }

  async function setSupply() {
    try {
      const isUnlimited = condition.maxClaimableSupply.toString() === maxInt
      const supplyElement = document.getElementById('supply')
      const barBox = document.getElementById('bar-box');
      if (isUnlimited) {
        supplyElement.innerText = `${condition.supplyClaimed.toString()} / Unlimited`
      } else {
        supplyElement.innerText = `${condition.supplyClaimed.toString()} / ${condition.maxClaimableSupply.toString()}`
        barBox.style.display = 'block'
      }
    } catch (err) {
      console.error(err)
    }
  }

  async function setConditionInfo(account) {
    const conditionInfo = document.getElementById('condition-info');

    const limitP = document.createElement('p');
    if (condition.quantityLimitPerWallet.toString() == maxInt) {
      limitP.innerText = `Limit: Unlimited`;
    } else {
      limitP.innerText = `Limit ${condition.quantityLimitPerWallet.toString()} per wallet`;
    }
    limitP.classList.add('text-sm');
    conditionInfo.appendChild(limitP);

    if (account.address) {
      const claimedP = document.createElement('p');
      const supplyClaimed = await readContract.read.getSupplyClaimedByWallet([{{ section.settings.active_condition_id }}, account.address])
      const supplyClaimedNumber = Number(supplyClaimed)
      claimedP.innerText = `Calimed by you: ${supplyClaimedNumber}`;
      claimedP.classList.add('text-sm');
      conditionInfo.appendChild(claimedP);
    }
  }

  async function mint(e) {
    try {
      e.preventDefault()
      btn.disabled = true
      btn.querySelector('.loader').style.display = 'inline-block'
      btn.classList.add('loading')

      const currentChain = await getNetwork()
      if (currentChain.chain.id !== Number(chainId)) {
        const network = await switchNetwork({
          chainId,
        })
        return
      }

      const walletClient = await getWalletClient()
      const address = await walletClient.account.address
      
      const pricePerToken = parseInt(condition.pricePerToken) / 10 ** 18

      const quantity = Number(document.getElementById('mint-number-input').value)
      const price = pricePerToken * quantity
      const quantityLimitPerWallet = Number(condition.quantityLimitPerWallet.toString())

      const { hash } = await writeContract({
        address: '{{ settings.primary_collection.contract_address }}',
        abi: {{ settings.primary_collection.abi }},
        functionName: 'claim',
        args: [
          address, // receiver
          quantity, // quantity
          condition.currency, // currency
          condition.pricePerToken, // price per token
          [
            [], "3", "0", condition.currency
          ],
          "0x00" // data
        ],
        value: (price * 10 ** 18).toString() // native token value
      })
      console.log("hash", hash)
      const res = await waitForTransaction({
        hash
      })
      console.log(res)
      new Notify({
        title: 'Mint is completed',
        status: "success",
        autoclose: true,
        autotimeout: 5000
      })
      await setSupply()
    } catch (err) {
      console.log("err", err)
      new Notify({
        title: 'Mint is failed',
        text: "If you do not know the cause, please contact us.",
        status: "error",
      })
    } finally {
      btn.disabled = false
      btn.querySelector('.loader').style.display = 'none'
      btn.classList.remove('loading')
    }
  }

  if (btn) {
    btn.addEventListener('click', mint)
  }

  const input = document.getElementById('mint-number-input');
  const incrementButton = document.getElementById('increment-button');
  const decrementButton = document.getElementById('decrement-button');

  if (input) {
    input.value = 1;
  }

  if (incrementButton) {
    incrementButton.addEventListener('click', () => {
      let currentValue = Number(input.value);
      if (condition.quantityLimitPerWallet <= currentValue) return;
      input.value = currentValue + 1;
    });
  }

  if (decrementButton) {
    decrementButton.addEventListener('click', () => {
      let currentValue = Number(input.value);
      if(currentValue > 1) {
        input.value = currentValue - 1;
      }
    });
  }
</script>

{% schema %}
  {
    "name": "Mint",
    "settings": [
      {
        "type": "text",
        "id": "title",
        "label": "Title",
        "default": "Season 1"
      },
      {
        "type": "image_picker",
        "id": "featured_image",
        "label": "Featured Image",
        "default": "https://dev-cocoshop-images.s3.us-east-2.amazonaws.com/alchemy/v1/member0.jpg"
      },
      {
        "type": "text",
        "id": "end_date",
        "label": "End Date",
        "default": "Mint ends 2023, July 18 at 11:00 PM"
      },
      {
        "type": "text",
        "id": "active_condition_id",
        "label": "Active Condition ID",
        "default": "0"
      }
    ]
  }
{% endschema %}